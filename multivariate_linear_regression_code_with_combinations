import itertools
import pandas as pd #It is necessary to install pandas.
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
import numpy as np


#Load database
ds = pd.read_excel('database.xlsx') #download from https://archive.ics.uci.edu/dataset/294/combined+cycle+power+plant 

#Separate the independent variables (features) from the dependent variable (target).)
x = ds.iloc[:, :-1]
y = ds.iloc[:, -1]

resultsavg = [] #List to store the results of all tests.
results = [] #List to store the results for each mean of the n tests.
model = LinearRegression()

# Columns for combination.
columns_combination = ['AT', 'V', 'AP', 'RH']

# Generate combinations between the column names.
for i in range(1,5):
    comb_columns = list(itertools.combinations(columns_combination, i))
    # Loop to print the combinations.
    for comb in comb_columns:
        resultsaux = []
        X = x[list(comb)].copy()
        for n in range(1, 101):
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=n)
            model.fit(X_train, y_train)    
            # Calculate the MAPE manually after cross-validation.
            y_pred = model.predict(X_test)
            r2 = r2_score(y_test, y_pred)
            rmse = np.sqrt(mean_squared_error(y_test, y_pred)) #Calculate RMSE
            mape=mean_absolute_percentage_error(y_test, y_pred) #Calculate MAPE
            mae=mean_absolute_error(y_test, y_pred) #Calculate MAE
            resultsaux.append({ 
                'Index': list(comb),
                'R²': r2,
                'MAE': mae,
                'RMSE': rmse,
                'MAPE': mape
            })
            results.append({
                'Index': list(comb),
                'R²': r2,
                'MAE': mae,
                'RMSE': rmse,
                'MAPE': mape
            })
        
        df_results_aux = pd.DataFrame(resultsaux).set_index('Index')

        #average results
        resultsavg.append({
            'Index': comb,
            'R²': df_results_aux['R²'].mean(),
            'MAE': df_results_aux['MAE'].mean(),
            'RMSE': df_results_aux['RMSE'].mean(),
            'MAPE': df_results_aux['MAPE'].mean()
        })
        
df_results = pd.DataFrame(results).set_index('Index')
file_name = 'multiple_regression_results.xlsx'  # Excel file name
df_results.to_excel(file_name)  # Save the DataFrame to the Excel file.
df_results_avg = pd.DataFrame(resultsavg).set_index('Index')
file_name = 'multiple_regression_results_average.xlsx'  # Excel file name
df_results_avg.to_excel(file_name)  # Save the DataFrame to the Excel file.

