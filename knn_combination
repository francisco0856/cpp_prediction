import itertools
import pandas as pd
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
import numpy as np
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import  GridSearchCV

# Exemplo de conjunto de dados com 3 colunas

# Carregar os dados
ds = pd.read_excel('dados.xlsx')

# Separar as variáveis independentes (features) da variável dependente (target)
x = ds.iloc[:, :-1]
y = ds.iloc[:, -1]

resultsmedia = [] #Lista para armazenar os resultados de todos os testes
results = [] #Lista para armazenar os resultados para cada media dos n testes

k_range = list(range(1, 21))#varia o k de 1 até 30

results = []  # Lista para armazenar os resultados para cada n
best_models = {}  # Dicionário para armazenar o melhor modelo para cada n
# Loop para treinar e salvar o melhor modelo para cada valor de n

# Definir os parâmetros para a otimização
param_grid= {
    'n_neighbors': k_range,  # Valores a serem testados para o número de vizinhos
    'weights': ['uniform', 'distance'],  # Valores a serem testados para o parâmetro weights
    #‘distance’ os pesos são calculados pelo inverso da distância. Nesse caso, vizinhos 
    #mais próximos do ponto de consulta terão uma influência maior do que vizinhos que 
    #estão mais distantes.
    # ‘uniform’ Todos os pontos em cada vizinhança têm pesos iguais.
    'p': [1, 2, 3]  # Valores a serem testados para o parâmetro 
    #p=1 -> manhattan_distance ,
    #p=2 -> euclidean_distance
    #p=3 ->Minkowski (l_3)
}   
# Criar o modelo de regressão KNN
model = KNeighborsRegressor()


# Colunas para combinação
colunas_combinacao = ['AT', 'V', 'AP', 'RH']

# Gerar combinações entre os nomes das colunas
for i in range(1,5):
    comb_colunas = list(itertools.combinations(colunas_combinacao, i))
    # Loop para imprimir as combinações
    for comb in comb_colunas:
        resultsaux = []
        X = x[list(comb)].copy()
        for n in range(1, 101): 
            model = KNeighborsRegressor()
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=n)
            # Realizar a busca em grid com validação cruzada
            grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_absolute_error')
            grid_search.fit(X_train, y_train)
            # Obter o modelo correspondente e parametros
            best_model = grid_search.best_estimator_
    
            # Calcular o MAPE manualmente após a validação cruzada
            y_pred = best_model.predict(X_test)
            r2 = r2_score(y_test, y_pred)
            rmse = np.sqrt(mean_squared_error(y_test, y_pred))
            mape=mean_absolute_percentage_error(y_test, y_pred)
            mae=mean_absolute_error(y_test, y_pred)
            resultsaux.append({ 
                'random_state': n,
                'Índice': list(comb),
                'R²': r2,
                'MAE': mae,
                'RMSE': rmse,
                'MAPE': mape
            })
            results.append({
                'random_state': n,
                'Índice': list(comb),
                'R²': r2,
                'MAE': mae,
                'RMSE': rmse,
                'MAPE': mape
            })
        
        df_results_aux = pd.DataFrame(resultsaux).set_index('Índice')

        resultsmedia.append({
            'Índice': comb,
            'R²': df_results_aux['R²'].mean(),
            'MAE': df_results_aux['MAE'].mean(),
            'RMSE': df_results_aux['RMSE'].mean(),
            'MAPE': df_results_aux['MAPE'].mean()
        })

        
df_results = pd.DataFrame(results).set_index('Índice')
nome_arquivo = 'resultados_knn_combinacao.xlsx'  # Nome do arquivo Excel
df_results.to_excel(nome_arquivo)  # Salvar o DataFrame no arquivo Excel
df_results_media = pd.DataFrame(resultsmedia).set_index('Índice')
nome_arquivo = 'resultados_knn_combinacao_media.xlsx'  # Nome do arquivo Excel
df_results_media.to_excel(nome_arquivo)  # Salvar o DataFrame no arquivo Excel

